#pragma config(Motor,  port1,           leftFront,     tmotorVex393, openLoop)
#pragma config(Motor,  port2,           leftRear,      tmotorVex393, openLoop)
#pragma config(Motor,  port9,           rightFront,    tmotorVex393, openLoop)
#pragma config(Motor,  port10,          rightRear,     tmotorVex393, openLoop)
#pragma config(Motor,  port5,           leftArm,       tmotorVex393, openLoop)
#pragma config(Motor,  port6,           rightArm,      tmotorVex393, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
	//Hits first friendly large ball into goal zone.
	ClearTimer(T1);
	while(time1[T1] < 1000)
	{
  motor[leftFront] = 127;
  motor[leftRear] = 127;
  motor[rightFront] = 127;
  motor[rightRear] = 127;
  motor[leftArm] = 80;
  motor[rightArm] = 80;
	}
	//Keeps arm lifted, turns to the right 90 degrees.
	ClearTimer(T1);
	while(time1[T1] < 500)
	{
	motor[leftFront] = 127;
  motor[leftRear] = 127;
  motor[rightFront] = -127;
  motor[rightRear] = -127;
  motor[leftArm] = 80;
  motor[rightArm] = 80;
	}
	//Hits second friendly large ball into goal zone.
	ClearTimer(T1);
	while(time1[T1] < 1000)
	{
  motor[leftFront] = 127;
  motor[leftRear] = 127;
  motor[rightFront] = 127;
  motor[rightRear] = 127;
  motor[leftArm] = 80;
  motor[rightArm] = 80;
	}
	//Lowers arm in prep for going under barrier, turns to the left 90 degrees.
	ClearTimer(T1);
	while(time1[T1] < 500)
	{
  motor[leftFront] = -127;
  motor[leftRear] = -127;
  motor[rightFront] = 127;
  motor[rightRear] = 127;
  motor[leftArm] = 0;
  motor[rightArm] = 0;
	}
	//Moves up to the goal.
	ClearTimer(T1);
	while(time1[T1] < 1000)
	{
  motor[leftFront] = 127;
  motor[leftRear] = 127;
  motor[rightFront] = 127;
  motor[rightRear] = 127;
  motor[leftArm] = 0;
  motor[rightArm] = 0;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	// User control code here, inside the loop
	while (true)
	{
	  // This is the main execution loop for the user control program. Each time through the loop
	  // your program should update motor + servo values based on feedback from the joysticks.

	  // .....................................................................................
	  // Insert user code here. This is where you use the joystick values to update your motors, etc.
	  // .....................................................................................

		//Arm
	  //Use Left Stick
		motor[leftArm] = 2*(vexRT[Ch3])/3;
		motor[rightArm] = 2*(vexRT[Ch3])/3;

		//Intake
		//RB Upper is Intake, LB Upper is Output
		if (vexRT[Btn5U] == 1)
		{
			motor[port3] = -127;
			motor[port4] = -127;
		}
		else if (vexRT[Btn6U] == 1)
		{
			motor[port3] = 127;
			motor[port4] = 127;
		}
		else
		{
			motor[port3] = 0;
			motor[port4] = 0;
		}
		//Turning/Straight driving
		//Use Right-Stick
		if((vexRT[Ch1] > 20) || (vexRT[Ch1] < -20))
		{
			motor[port1] = (vexRT[Ch2] + vexRT[Ch4]);
			motor[port2] = (vexRT[Ch2] + vexRT[Ch4]);
			motor[port9] = (vexRT[Ch2] - vexRT[Ch4]);
			motor[port10]= (vexRT[Ch2] - vexRT[Ch4]);
		}
		else
		{
			motor[port1] = vexRT[Ch2];
			motor[port2] = vexRT[Ch2];
			motor[port9] = vexRT[Ch2];
			motor[port10]= vexRT[Ch2];
		}
	}
}
